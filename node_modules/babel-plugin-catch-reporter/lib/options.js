"use strict";var _constants=require("./constants");Object.defineProperty(exports,"__esModule",{value:!0}),exports.getOptions=getOptions,exports.prepare=prepare;function getMatcher(matcher,matcherName,defaultMatcher=[]){let matcherForRegExp;if(matcher){const matcherAsArray=Array.isArray(matcher);if(matcherAsArray){const validMatcher=matcher.filter(Boolean).map(stringMatcher=>`(${stringMatcher})`);matcherForRegExp=validMatcher.join("|")}else if("string"==typeof matcher)matcherForRegExp=matcher;else throw new Error(`[babel-plugin-catch-reporter] '${matcherName}' can be string or array with strings`)}else matcherForRegExp=defaultMatcher.map(stringMatcher=>`(${stringMatcher})`).join("|");return new RegExp(matcherForRegExp)}function getSourceMatcher(){return[".*js(x)?$"]}function getSourceExcludeMatcher(){return["__fixtures__","__mocks__","__tests__","__snapshots__","node_modules"]}function getOutput(settings){const options={argsAsObject:!1,type:"simple"};if(settings&&"object"==typeof settings){const useType=settings.type,isValidType=["simple","object"].includes(useType);isValidType&&(options.type=useType,options.argsAsObject=!0===settings.argsAsObject,"object"===useType&&(options.source=settings.source||"source",options.name=settings.name||"name",options.args=settings.args||"args"))}return options}function getOptions(loggingData){const options={},_ref=loggingData||{},name=_ref.name,source=_ref.source,methodName=_ref.methodName;return options.name=name||_constants.LOGGER_API,options.source=options.name===_constants.LOGGER_API?"":source||"",options.methodName=methodName||"log",{...loggingData,...options}}function prepare(receivedOptions){const options={sourceMatcher:getMatcher(receivedOptions.sourceMatcher,"sourceMatcher",getSourceMatcher()),sourceExcludeMatcher:getMatcher(receivedOptions.sourceExcludeMatcher,"sourceExcludeMatcher",getSourceExcludeMatcher()),output:getOutput(receivedOptions.output)};return{...options,...getOptions(receivedOptions)}}