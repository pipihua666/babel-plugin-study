"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getLoggerName=getLoggerName,exports.getLoggerSource=getLoggerSource,exports.isValidPathAndState=isValidPathAndState,exports.addLogger=addLogger;var types=_interopRequireWildcard(require("@babel/types")),_arguments=require("./arguments"),_sourceFile=require("./source-file"),_constants=require("./constants");function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var cache=new WeakMap;return _getRequireWildcardCache=function(){return cache},cache}function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache();if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}function hasLogging(bodyNode,state){const isExpressionStatement=types.isExpressionStatement(bodyNode);if(!isExpressionStatement)return!1;const expression=bodyNode.expression,isCallExpression=types.isCallExpression(expression);if(!isCallExpression)return!1;const callee=expression.callee,isMemberExpression=types.isMemberExpression(callee);if(!isMemberExpression)return!1;const calleeObject=callee.object,isIdentifier=types.isIdentifier(calleeObject);if(!isIdentifier)return!1;const loggerName=getLoggerName(state);return calleeObject.name===loggerName}function canBeAdded(path,state){const isBlockStatement=types.isBlockStatement(path);if(!isBlockStatement)return!1;const blockBody=path.node.body,foundLogger=blockBody.find(bodyNode=>hasLogging(bodyNode,state));return!foundLogger}function getPathForInsert(path){const insertPath=path.get("body"),isBlockStatement=types.isBlockStatement(insertPath);if(isBlockStatement)return insertPath;const isArrowFunctionExpression=types.isArrowFunctionExpression(insertPath);return isArrowFunctionExpression?getPathForInsert(insertPath):void 0}function getLocation(path){const _ref=path.node||{},_ref$loc=_ref.loc,_ref$loc2=void 0===_ref$loc?{}:_ref$loc,_ref$loc2$start=_ref$loc2.start,_ref$loc2$start2=void 0===_ref$loc2$start?{}:_ref$loc2$start,column=_ref$loc2$start2.column,line=_ref$loc2$start2.line;return{column,line}}function getName(path){var _NumberisInteger=Number.isInteger;const isCatchClause=types.isCatchClause(path);if(isCatchClause)return"catchClause";const _path$container=path.container,container=void 0===_path$container?{}:_path$container,_path$node=path.node,node=void 0===_path$node?{}:_path$node,_path$parent=path.parent,parent=void 0===_path$parent?{}:_path$parent;if(node.id)return node.id.name;if(container.id)return container.id.name;if(parent.left&&parent.left.property)return parent.left.property.name;if(parent.left&&parent.left.name)return parent.left.name;const _node$key=node.key,nodeKey=void 0===_node$key?{}:_node$key;if(nodeKey&&nodeKey.name)return nodeKey.name;const _parent$key=parent.key,parentKey=void 0===_parent$key?{}:_parent$key;if(parentKey&&parentKey.name)return parentKey.name;const _parent$callee=parent.callee,_parent$callee2=void 0===_parent$callee?{}:_parent$callee,property=_parent$callee2.property;return property&&"catch"===property.name?_constants.MEMBER_EXPRESSION_CATCH:path.inList&&_NumberisInteger(path.key)?`array-item-${path.key}`:void 0}function insertLogging(path,insertPath,state,partialData){const source=(0,_sourceFile.getSrc)(state),knownData={column:partialData.column,line:partialData.line,name:partialData.name,source},methodName=state.babelPluginLoggerSettings.methodName;methodName&&insertPath.unshiftContainer("body",types.expressionStatement(types.callExpression(types.memberExpression(types.identifier(getLoggerName(state)),types.identifier(methodName)),(0,_arguments.getArgs)(path,state,knownData))))}function getLoggerName(state){return state.babelPluginLoggerSettings.name}function getLoggerSource(state){return state.babelPluginLoggerSettings.source}function isValidPathAndState(path,state){if(path.node._generated)return!1;const filename=state.file.opts.filename,_state$babelPluginLog=state.babelPluginLoggerSettings,sourceMatcher=_state$babelPluginLog.sourceMatcher,sourceExcludeMatcher=_state$babelPluginLog.sourceExcludeMatcher,allowFromSource=sourceMatcher.test(filename);if(!allowFromSource)return!1;const excludeFromSource=sourceExcludeMatcher.test(filename);return!excludeFromSource}function addLogger(path,state){const name=getName(path);if(!name)return!1;const insertPath=getPathForInsert(path);if(!insertPath)return!1;const _getLocation=getLocation(insertPath),column=_getLocation.column,line=_getLocation.line;if(!(column!==void 0&&line!==void 0))return!1;const loggerCanBeAdded=canBeAdded(insertPath,state);return!!loggerCanBeAdded&&(insertLogging(path,insertPath,state,{column,line,name}),state.caught=!0,!0)}